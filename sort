###堆排序（大根堆升序）

    public static int[] heapSort(int[] a) {
        int[] array = buildHeap(a);
        for (int i = array.length - 1;i > 0; i--) {
            int temp = array[i];
            array[i] = array[0];
            array[0] = temp;
            adjustHeap(array, i, 0);
        }
        return array;
    }

    public static int[] buildHeap(int[] array) {
        for (int i = (array.length - 2) / 2; i >= 0; i--) {
            adjustHeap(array, array.length, i);
        }
        return array;
    }

    public static void adjustHeap(int[] array, int length, int k) {
        int temp = array[k];
        for (int i = 2 * k + 1; i < length; i = 2 * k + 1) {
            if (i + 1 < length && array[i] < array[i + 1]) {
                i++;
            }
            if (temp >= array[i]) {
                break;
            } else {
                array[k] = array[i];
                k = i;
            }
        }
        array[k] = temp;
    }
    
注意点：
1. 下标为i的节点，其左子节点下标为2*i+1，右子节点下标为2*i+2，父节点下标为(i-1)/2（下标均从0开始）。
2. 建堆时，从最后一个非叶节点开始，往前遍历；建堆完成后，与根交换的节点也是从后往前遍历，依次取出最大元素置于末尾。
3. 调整堆序的操作，自上而下调整子节点与其父节点。

另一种编码：
/**
 * @param a
 */
public static void sort(int[] a) {

    for (int i = a.length - 1; i > 0; i--) {
        max_heapify(a, i);

        //堆顶元素(第一个元素)与Kn交换
        int temp = a[0];
        a[0] = a[i];
        a[i] = temp;
    }
}

/***
 *
 *  将数组堆化
 *  i = 第一个非叶子节点。
 *  从第一个非叶子节点开始即可。无需从最后一个叶子节点开始。
 *  叶子节点可以看作已符合堆要求的节点，根节点就是它自己且自己以下值为最大。
 *
 * @param a
 * @param n
 */
public static void max_heapify(int[] a, int n) {
    int child;
    for (int i = (n - 1) / 2; i >= 0; i--) {
        //左子节点位置
        child = 2 * i + 1;
        //右子节点存在且大于左子节点，child变成右子节点
        if (child < n && a[child] < a[child + 1]) {
            child++;
        }
        //交换父节点与左右子节点中的最大值
        if (a[i] < a[child]) {
            int temp = a[i];
            a[i] = a[child];
            a[child] = temp;
        }
    }
}
